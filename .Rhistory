Score = c("Local_Score", "Systemic_Score", "Global_Score"),
Mean = c(mean(final_merged_react$Local_Score, na.rm = TRUE),
mean(final_merged_react$Systemic_Score, na.rm = TRUE),
mean(final_merged_react$Global_Score, na.rm = TRUE)),
SD = c(sd(final_merged_react$Local_Score, na.rm = TRUE),
sd(final_merged_react$Systemic_Score, na.rm = TRUE),
sd(final_merged_react$Global_Score, na.rm = TRUE)),
Median = c(median(final_merged_react$Local_Score, na.rm = TRUE),
median(final_merged_react$Systemic_Score, na.rm = TRUE),
median(final_merged_react$Global_Score, na.rm = TRUE)),
Min = c(min(final_merged_react$Local_Score, na.rm = TRUE),
min(final_merged_react$Systemic_Score, na.rm = TRUE),
min(final_merged_react$Global_Score, na.rm = TRUE)),
Max = c(max(final_merged_react$Local_Score, na.rm = TRUE),
max(final_merged_react$Systemic_Score, na.rm = TRUE),
max(final_merged_react$Global_Score, na.rm = TRUE)),
Missing_Percentage = c(
paste0(round(mean(is.na(final_merged_react$Local_Score)) * 100, 2), "%"),
paste0(round(mean(is.na(final_merged_react$Systemic_Score)) * 100, 2), "%"),
paste0(round(mean(is.na(final_merged_react$Global_Score)) * 100, 2), "%")
)
)
# Print summary table with title
print("Summary Statistics for Scores")
print(score_summary)
# Step 2: Visualizations
# Histogram for Local Score
ggplot(final_merged_react, aes(x = Local_Score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Distribution of Local Score", x = "Local Score", y = "Count")
# Histogram for Systemic Score
ggplot(final_merged_react, aes(x = Systemic_Score)) +
geom_histogram(binwidth = 1, fill = "green", color = "black") +
labs(title = "Distribution of Systemic Score", x = "Systemic Score", y = "Count")
# Histogram for Global Score
ggplot(final_merged_react, aes(x = Global_Score)) +
geom_histogram(binwidth = 1, fill = "red", color = "black") +
labs(title = "Distribution of Global Score", x = "Global Score", y = "Count")
# Boxplot stratified by VAXNUM
ggplot(final_merged_react, aes(x = as.factor(VAXNUM), y = Local_Score)) +
geom_boxplot() +
labs(title = "Local Score by VAXNUM", x = "VAXNUM", y = "Local Score")
# Step 3: Correlation matrix
cor_results <- final_merged_react %>%
select(Local_Score, Systemic_Score, Global_Score) %>%
cor(use = "complete.obs")
# Print correlation results with title
#print("Correlation Matrix for Scores")
#print(cor_results)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Step 1: Summary statistics for each score as rows
score_summary <- data.frame(
Score = c("Local_Score", "Systemic_Score", "Global_Score"),
Mean = c(mean(final_merged_react$Local_Score, na.rm = TRUE),
mean(final_merged_react$Systemic_Score, na.rm = TRUE),
mean(final_merged_react$Global_Score, na.rm = TRUE)),
SD = c(sd(final_merged_react$Local_Score, na.rm = TRUE),
sd(final_merged_react$Systemic_Score, na.rm = TRUE),
sd(final_merged_react$Global_Score, na.rm = TRUE)),
Median = c(median(final_merged_react$Local_Score, na.rm = TRUE),
median(final_merged_react$Systemic_Score, na.rm = TRUE),
median(final_merged_react$Global_Score, na.rm = TRUE)),
Min = c(min(final_merged_react$Local_Score, na.rm = TRUE),
min(final_merged_react$Systemic_Score, na.rm = TRUE),
min(final_merged_react$Global_Score, na.rm = TRUE)),
Max = c(max(final_merged_react$Local_Score, na.rm = TRUE),
max(final_merged_react$Systemic_Score, na.rm = TRUE),
max(final_merged_react$Global_Score, na.rm = TRUE)),
Missing_Percentage = c(
paste0(round(mean(is.na(final_merged_react$Local_Score)) * 100, 2), "%"),
paste0(round(mean(is.na(final_merged_react$Systemic_Score)) * 100, 2), "%"),
paste0(round(mean(is.na(final_merged_react$Global_Score)) * 100, 2), "%")
)
)
# Print summary table with title
cat("\n\n### Summary Statistics for Scores\n\n")
print(score_summary)
# Step 2: Visualizations
# Histogram for Local Score
ggplot(final_merged_react, aes(x = Local_Score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Distribution of Local Score", x = "Local Score", y = "Count")
# Histogram for Systemic Score
ggplot(final_merged_react, aes(x = Systemic_Score)) +
geom_histogram(binwidth = 1, fill = "green", color = "black") +
labs(title = "Distribution of Systemic Score", x = "Systemic Score", y = "Count")
# Histogram for Global Score
ggplot(final_merged_react, aes(x = Global_Score)) +
geom_histogram(binwidth = 1, fill = "red", color = "black") +
labs(title = "Distribution of Global Score", x = "Global Score", y = "Count")
# Boxplot stratified by VAXNUM
ggplot(final_merged_react, aes(x = as.factor(VAXNUM), y = Local_Score)) +
geom_boxplot() +
labs(title = "Local Score by VAXNUM", x = "VAXNUM", y = "Local Score")
# Step 3: Correlation matrix
cor_results <- final_merged_react %>%
select(Local_Score, Systemic_Score, Global_Score) %>%
cor(use = "complete.obs")
# Print correlation results with title
cat("\n\n### Correlation Matrix for Scores\n\n")
print(cor_results)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Step 1: Summary statistics for each score as rows
score_summary <- data.frame(
Score = c("Local_Score", "Systemic_Score", "Global_Score"),
Mean = c(mean(final_merged_react$Local_Score, na.rm = TRUE),
mean(final_merged_react$Systemic_Score, na.rm = TRUE),
mean(final_merged_react$Global_Score, na.rm = TRUE)),
SD = c(sd(final_merged_react$Local_Score, na.rm = TRUE),
sd(final_merged_react$Systemic_Score, na.rm = TRUE),
sd(final_merged_react$Global_Score, na.rm = TRUE)),
Median = c(median(final_merged_react$Local_Score, na.rm = TRUE),
median(final_merged_react$Systemic_Score, na.rm = TRUE),
median(final_merged_react$Global_Score, na.rm = TRUE)),
Min = c(min(final_merged_react$Local_Score, na.rm = TRUE),
min(final_merged_react$Systemic_Score, na.rm = TRUE),
min(final_merged_react$Global_Score, na.rm = TRUE)),
Max = c(max(final_merged_react$Local_Score, na.rm = TRUE),
max(final_merged_react$Systemic_Score, na.rm = TRUE),
max(final_merged_react$Global_Score, na.rm = TRUE)),
Missing_Percentage = c(
paste0(round(mean(is.na(final_merged_react$Local_Score)) * 100, 2), "%"),
paste0(round(mean(is.na(final_merged_react$Systemic_Score)) * 100, 2), "%"),
paste0(round(mean(is.na(final_merged_react$Global_Score)) * 100, 2), "%")
)
)
# Print summary table with title
cat("\n\n### Summary Statistics for Scores\n\n")
print(score_summary)
# Step 2: Visualizations
# Histogram for Local Score
ggplot(final_merged_react, aes(x = Local_Score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Distribution of Local Score", x = "Local Score", y = "Count")
# Histogram for Systemic Score
ggplot(final_merged_react, aes(x = Systemic_Score)) +
geom_histogram(binwidth = 1, fill = "green", color = "black") +
labs(title = "Distribution of Systemic Score", x = "Systemic Score", y = "Count")
# Histogram for Global Score
ggplot(final_merged_react, aes(x = Global_Score)) +
geom_histogram(binwidth = 1, fill = "red", color = "black") +
labs(title = "Distribution of Global Score", x = "Global Score", y = "Count")
# Boxplot stratified by VAXNUM
ggplot(final_merged_react, aes(x = as.factor(VAXNUM), y = Local_Score)) +
geom_boxplot() +
labs(title = "Local Score by VAXNUM", x = "VAXNUM", y = "Local Score")
# Step 3: Correlation matrix
cor_results <- final_merged_react %>%
select(Local_Score, Systemic_Score, Global_Score) %>%
cor(use = "complete.obs")
# Print correlation results with title
#cat("\n\n### Correlation Matrix for Scores\n\n")
#print(cor_results)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load necessary library
library(kableExtra)
# Create the summary statistics table
score_summary <- data.frame(
Score = c("Local_Score", "Systemic_Score", "Global_Score"),
Mean = c(mean(final_merged_react$Local_Score, na.rm = TRUE),
mean(final_merged_react$Systemic_Score, na.rm = TRUE),
mean(final_merged_react$Global_Score, na.rm = TRUE)),
SD = c(sd(final_merged_react$Local_Score, na.rm = TRUE),
sd(final_merged_react$Systemic_Score, na.rm = TRUE),
sd(final_merged_react$Global_Score, na.rm = TRUE)),
Median = c(median(final_merged_react$Local_Score, na.rm = TRUE),
median(final_merged_react$Systemic_Score, na.rm = TRUE),
median(final_merged_react$Global_Score, na.rm = TRUE)),
Min = c(min(final_merged_react$Local_Score, na.rm = TRUE),
min(final_merged_react$Systemic_Score, na.rm = TRUE),
min(final_merged_react$Global_Score, na.rm = TRUE)),
Max = c(max(final_merged_react$Local_Score, na.rm = TRUE),
max(final_merged_react$Systemic_Score, na.rm = TRUE),
max(final_merged_react$Global_Score, na.rm = TRUE)),
Missing_Percentage = c(
paste0(round(mean(is.na(final_merged_react$Local_Score)) * 100, 2), "%"),
paste0(round(mean(is.na(final_merged_react$Systemic_Score)) * 100, 2), "%"),
paste0(round(mean(is.na(final_merged_react$Global_Score)) * 100, 2), "%")
)
)
# Create a nicely formatted table
score_summary %>%
kable("html", col.names = c("Score", "Mean", "SD", "Median", "Min", "Max", "Missing (%)"),
caption = "Summary Statistics for Scores") %>%
kable_styling(full_width = FALSE, position = "center", bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
column_spec(1, bold = TRUE, color = "white", background = "steelblue") %>%
column_spec(2:7, border_left = TRUE)
# Step 2: Visualizations
# Histogram for Local Score
ggplot(final_merged_react, aes(x = Local_Score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Distribution of Local Score", x = "Local Score", y = "Count")
# Histogram for Systemic Score
ggplot(final_merged_react, aes(x = Systemic_Score)) +
geom_histogram(binwidth = 1, fill = "green", color = "black") +
labs(title = "Distribution of Systemic Score", x = "Systemic Score", y = "Count")
# Histogram for Global Score
ggplot(final_merged_react, aes(x = Global_Score)) +
geom_histogram(binwidth = 1, fill = "red", color = "black") +
labs(title = "Distribution of Global Score", x = "Global Score", y = "Count")
# Boxplot stratified by VAXNUM
ggplot(final_merged_react, aes(x = as.factor(VAXNUM), y = Local_Score)) +
geom_boxplot() +
labs(title = "Local Score by VAXNUM", x = "VAXNUM", y = "Local Score")
# Step 3: Correlation matrix
cor_results <- final_merged_react %>%
select(Local_Score, Systemic_Score, Global_Score) %>%
cor(use = "complete.obs")
# Print correlation results with title
#cat("\n\n### Correlation Matrix for Scores\n\n")
#print(cor_results)
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load necessary library
library(kableExtra)
# Create the summary statistics table
score_summary <- data.frame(
Score = c("Local_Score", "Systemic_Score", "Global_Score"),
Mean = c(mean(final_merged_react$Local_Score, na.rm = TRUE),
mean(final_merged_react$Systemic_Score, na.rm = TRUE),
mean(final_merged_react$Global_Score, na.rm = TRUE)),
SD = c(sd(final_merged_react$Local_Score, na.rm = TRUE),
sd(final_merged_react$Systemic_Score, na.rm = TRUE),
sd(final_merged_react$Global_Score, na.rm = TRUE)),
Median = c(median(final_merged_react$Local_Score, na.rm = TRUE),
median(final_merged_react$Systemic_Score, na.rm = TRUE),
median(final_merged_react$Global_Score, na.rm = TRUE)),
Min = c(min(final_merged_react$Local_Score, na.rm = TRUE),
min(final_merged_react$Systemic_Score, na.rm = TRUE),
min(final_merged_react$Global_Score, na.rm = TRUE)),
Max = c(max(final_merged_react$Local_Score, na.rm = TRUE),
max(final_merged_react$Systemic_Score, na.rm = TRUE),
max(final_merged_react$Global_Score, na.rm = TRUE)),
Missing_Percentage = c(
paste0(round(mean(is.na(final_merged_react$Local_Score)) * 100, 2), "%"),
paste0(round(mean(is.na(final_merged_react$Systemic_Score)) * 100, 2), "%"),
paste0(round(mean(is.na(final_merged_react$Global_Score)) * 100, 2), "%")
)
)
# Create a nicely formatted table
score_summary %>%
kable("html", col.names = c("Score", "Mean", "SD", "Median", "Min", "Max", "Missing (%)"),
caption = "Summary Statistics for Scores") %>%
kable_styling(full_width = FALSE, position = "center", bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
column_spec(1, bold = TRUE, color = "white", background = "steelblue") %>%
column_spec(2:7, border_left = TRUE)
# Step 2: Visualizations
# Histogram for Local Score
ggplot(final_merged_react, aes(x = Local_Score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Distribution of Local Score", x = "Local Score", y = "Count")
# Histogram for Systemic Score
ggplot(final_merged_react, aes(x = Systemic_Score)) +
geom_histogram(binwidth = 1, fill = "green", color = "black") +
labs(title = "Distribution of Systemic Score", x = "Systemic Score", y = "Count")
# Histogram for Global Score
ggplot(final_merged_react, aes(x = Global_Score)) +
geom_histogram(binwidth = 1, fill = "red", color = "black") +
labs(title = "Distribution of Global Score", x = "Global Score", y = "Count")
# Boxplot stratified by VAXNUM
ggplot(final_merged_react, aes(x = as.factor(VAXNUM), y = Local_Score)) +
geom_boxplot() +
labs(title = "Local Score by VAXNUM", x = "VAXNUM", y = "Local Score")
ggplot(final_merged_react, aes(x = as.factor(VAXNUM), y = Systemic_Score)) +
geom_boxplot() +
labs(title = "Systemic Score by VAXNUM", x = "VAXNUM", y = "Systemic Score")
ggplot(final_merged_react, aes(x = as.factor(VAXNUM), y = Glocal_Score)) +
geom_boxplot() +
labs(title = "Global Score by VAXNUM", x = "VAXNUM", y = "Global Score")
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load necessary library
library(kableExtra)
# Create the summary statistics table
score_summary <- data.frame(
Score = c("Local_Score", "Systemic_Score", "Global_Score"),
Mean = c(mean(final_merged_react$Local_Score, na.rm = TRUE),
mean(final_merged_react$Systemic_Score, na.rm = TRUE),
mean(final_merged_react$Global_Score, na.rm = TRUE)),
SD = c(sd(final_merged_react$Local_Score, na.rm = TRUE),
sd(final_merged_react$Systemic_Score, na.rm = TRUE),
sd(final_merged_react$Global_Score, na.rm = TRUE)),
Median = c(median(final_merged_react$Local_Score, na.rm = TRUE),
median(final_merged_react$Systemic_Score, na.rm = TRUE),
median(final_merged_react$Global_Score, na.rm = TRUE)),
Min = c(min(final_merged_react$Local_Score, na.rm = TRUE),
min(final_merged_react$Systemic_Score, na.rm = TRUE),
min(final_merged_react$Global_Score, na.rm = TRUE)),
Max = c(max(final_merged_react$Local_Score, na.rm = TRUE),
max(final_merged_react$Systemic_Score, na.rm = TRUE),
max(final_merged_react$Global_Score, na.rm = TRUE)),
Missing_Percentage = c(
paste0(round(mean(is.na(final_merged_react$Local_Score)) * 100, 2), "%"),
paste0(round(mean(is.na(final_merged_react$Systemic_Score)) * 100, 2), "%"),
paste0(round(mean(is.na(final_merged_react$Global_Score)) * 100, 2), "%")
)
)
# Create a nicely formatted table
score_summary %>%
kable("html", col.names = c("Score", "Mean", "SD", "Median", "Min", "Max", "Missing (%)"),
caption = "Summary Statistics for Scores") %>%
kable_styling(full_width = FALSE, position = "center", bootstrap_options = c("striped", "hover", "condensed", "responsive")) %>%
column_spec(1, bold = TRUE, color = "white", background = "steelblue") %>%
column_spec(2:7, border_left = TRUE)
# Step 2: Visualizations
# Histogram for Local Score
ggplot(final_merged_react, aes(x = Local_Score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = "Distribution of Local Score", x = "Local Score", y = "Count")
# Histogram for Systemic Score
ggplot(final_merged_react, aes(x = Systemic_Score)) +
geom_histogram(binwidth = 1, fill = "green", color = "black") +
labs(title = "Distribution of Systemic Score", x = "Systemic Score", y = "Count")
# Histogram for Global Score
ggplot(final_merged_react, aes(x = Global_Score)) +
geom_histogram(binwidth = 1, fill = "red", color = "black") +
labs(title = "Distribution of Global Score", x = "Global Score", y = "Count")
# Boxplot stratified by VAXNUM
ggplot(final_merged_react, aes(x = as.factor(VAXNUM), y = Local_Score)) +
geom_boxplot() +
labs(title = "Local Score by VAXNUM", x = "VAXNUM", y = "Local Score")
ggplot(final_merged_react, aes(x = as.factor(VAXNUM), y = Systemic_Score)) +
geom_boxplot() +
labs(title = "Systemic Score by VAXNUM", x = "VAXNUM", y = "Systemic Score")
ggplot(final_merged_react, aes(x = as.factor(VAXNUM), y = Global_Score)) +
geom_boxplot() +
labs(title = "Global Score by VAXNUM", x = "VAXNUM", y = "Global Score")
# Step 3: Correlation matrix
cor_results <- final_merged_react %>%
select(Local_Score, Systemic_Score, Global_Score) %>%
cor(use = "complete.obs")
# Print correlation results with title
cat("\n\n### Correlation Matrix for Scores\n\n")
print(cor_results)
library(readr)
X2by2 <- read_table("C:/Users/dell/Downloads/2by2.txt")
View(X2by2)
count(X2by2$group=2)
count(X2by2$group==2)
length(X2by2$group==2)
sum(X2by2$group==2)
sum(X2by2$group==2)/2
group2 <- X2by2 %>%
filter(group == 2)
library(dplyr)
sum(X2by2$group==1)/2
sum(X2by2$group==2)/2
group2 <- X2by2 %>%
filter(group == 2)
View(group2)
sum(group2$period==0&group2$outcome==0)
sum(group2$period==0&group2$outcome==1)
sum(group2$period==1&group2$outcome==0)
sum(group2$period==1&group2$outcome==1)
sum(group2$period==0&&group2$outcome==0)
data_x <- X2by2 %>%
mutate(
Treatment = ifelse(trt == 1, 1, 0), # Active Drug (1) vs Placebo (0)
Period = period, # First period (0), second period (1)
Outcome = outcome # Abnormal ECG (1) vs Normal ECG (0)
)
# Fit the logistic regression model WITH the period effect
model_with_period <- glm(Outcome ~ Treatment + Period, data = data_x, family = binomial)
# Fit the logistic regression model WITHOUT the period effect
model_without_period <- glm(Outcome ~ Treatment, data = data_x, family = binomial)
# Extract and compare point estimates and standard errors
comparison <- data.frame(
Model = c("With Period Effect", "Without Period Effect"),
Treatment_Estimate = c(coef(summary(model_with_period))["Treatment", "Estimate"],
coef(summary(model_without_period))["Treatment", "Estimate"]),
Treatment_SE = c(coef(summary(model_with_period))["Treatment", "Std. Error"],
coef(summary(model_without_period))["Treatment", "Std. Error"])
)
# Print the comparison
print(comparison)
# Assuming the dataset is loaded as 'data'
# Prepare the dataset
data_y <- X2by2 %>%
mutate(
Treatment = ifelse(trt == 1, 1, 0), # Active Drug (1) vs Placebo (0)
Period = period, # First period (0), second period (1)
Outcome = outcome, # Abnormal ECG (1) vs Normal ECG (0)
Cluster = ID # Cluster ID for participants
)
# Fit the GEE model
gee_model <- geeglm(Outcome ~ Treatment + Period,
data = data,
family = binomial,
id = Cluster,
corstr = "exchangeable") # Assumes exchangeable correlation structure
# Load necessary libraries
library(dplyr)
library(geepack)
install.packages("geepack")
# Load necessary libraries
library(dplyr)
library(geepack)
# Assuming the dataset is loaded as 'data'
# Prepare the dataset
data_y <- X2by2 %>%
mutate(
Treatment = ifelse(trt == 1, 1, 0), # Active Drug (1) vs Placebo (0)
Period = period, # First period (0), second period (1)
Outcome = outcome, # Abnormal ECG (1) vs Normal ECG (0)
Cluster = ID # Cluster ID for participants
)
# Fit the GEE model
gee_model <- geeglm(Outcome ~ Treatment + Period,
data = data,
family = binomial,
id = Cluster,
corstr = "exchangeable") # Assumes exchangeable correlation structure
# Assuming the dataset is loaded as 'data'
# Prepare the dataset
data_y <- X2by2 %>%
mutate(
Treatment = ifelse(trt == 1, 1, 0), # Active Drug (1) vs Placebo (0)
Period = period, # First period (0), second period (1)
Outcome = outcome, # Abnormal ECG (1) vs Normal ECG (0)
Cluster = ID # Cluster ID for participants
)
# Fit the GEE model
gee_model <- geeglm(Outcome ~ Treatment + Period,
data = data_y,
family = binomial,
id = Cluster,
corstr = "exchangeable") # Assumes exchangeable correlation structure
# Extract point estimates and robust standard errors
summary_gee <- summary(gee_model)
point_estimates <- summary_gee$coefficients[, "Estimate"]
robust_se <- summary_gee$coefficients[, "Std.err"]
# Create a comparison table
gee_comparison <- data.frame(
Parameter = rownames(summary_gee$coefficients),
Estimate = point_estimates,
Robust_SE = robust_se
)
# Print the results
print(gee_comparison)
# Load necessary library
library(geepack)
# Assuming the dataset is prepared as 'data'
# Add interaction term to the GEE model
gee_model_carryover <- geeglm(
Outcome ~ Treatment + Period + Treatment:Period,
data = X2by2,
family = binomial,
id = ID, # Cluster by participant
corstr = "exchangeable" # Exchangeable correlation structure
)
# Load necessary library
library(lme4)
# Load the data into R (assuming 'X2by2' is saved as a CSV file or equivalent)
# data_X2by2 <- read.csv("path_to_X2by2.csv") # Uncomment if you need to load the file
# Fit the random intercept logistic regression model with nAGQ = 1
model_nAGQ1 <- glmer(
outcome ~ trt + period + trt:period + (1 | ID),
data = data_X2by2,
family = binomial(link = "logit"),
nAGQ = 1
)
# Load necessary library
library(lme4)
# Load the data into R (assuming 'X2by2' is saved as a CSV file or equivalent)
# data_X2by2 <- read.csv("path_to_X2by2.csv") # Uncomment if you need to load the file
# Fit the random intercept logistic regression model with nAGQ = 1
model_nAGQ1 <- glmer(
outcome ~ trt + period + trt:period + (1 | ID),
data = X2by2,
family = binomial(link = "logit"),
nAGQ = 1
)
# Fit the random intercept logistic regression model with nAGQ = 10
model_nAGQ10 <- glmer(
outcome ~ trt + period + trt:period + (1 | ID),
data = X2by2,
family = binomial(link = "logit"),
nAGQ = 10
)
# Summarize and compare both models
summary_nAGQ1 <- summary(model_nAGQ1)
summary_nAGQ10 <- summary(model_nAGQ10)
# Print summaries for comparison
print("Model with nAGQ = 1:")
print(summary_nAGQ1)
print("Model with nAGQ = 10:")
print(summary_nAGQ10)
# Compare fixed effects
comparison <- data.frame(
Parameter = names(fixef(model_nAGQ1)),
Estimate_nAGQ1 = fixef(model_nAGQ1),
Estimate_nAGQ10 = fixef(model_nAGQ10)
)
# Print fixed effect comparisons
print("Comparison of Fixed Effects (nAGQ = 1 vs. nAGQ = 10):")
print(comparison)
setwd("C:/Users/dell/Downloads/collaborating_using_renv")
renv::snapshot(force = TRUE)
renv::status()
renv::install(c("RColorBrewer", "wesanderson"))
Sys.which("gcc")
system('gcc --version')
setwd("C:/Users/dell/Downloads/collaborating_using_renv")
renv::activate()
